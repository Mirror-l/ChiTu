{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./out/Application.js","webpack:///./out/Errors.js","webpack:///./out/Page.js","webpack:///./out/PageMaster.js","webpack:///./out/index.js","webpack:///external \"maishu-chitu-service\""],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,8DAAc,EAAE,sDAAU,CAAC,mCAAE;AACnF;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,qFAAqF,+CAA+C;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI,GAAG,YAAY,qBAAqB,IAAI,GAAG,YAAY;AAC3G;AACA,mBAAmB,KAAK,EAAE,WAAW;AACrC;AACA;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACnMF,iGAAO,CAAC,mBAAS,EAAE,OAAS,CAAC,mCAAE;AAC/B;AACA,kDAAkD,cAAc;AAChE;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA,oCAAoC,UAAU,iBAAiB,aAAa;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,MAAM;AAClG;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA,sDAAsD,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;AACA,yDAAyD,YAAY,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa,wCAAwC,SAAS;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACzGF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,sDAAU,EAAE,gEAAe,CAAC,mCAAE;AACpF;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACvGF;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,kDAAQ,EAAE,gEAAe,EAAE,sDAAU,CAAC,mCAAE;AAC9F;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,8CAA8C,SAAS;AACvD,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,GAAG,uBAAuB,GAAG;AAC/E;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC7NF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,gEAAe,EAAE,8DAAc,EAAE,kDAAQ,EAAE,uEAAsB,CAAC,mCAAE;AAClG;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACVF,kE","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./out/index.js\");\n","define([\"require\", \"exports\", \"maishu-chitu-service\", \"./PageMaster\", \"./Errors\"], function (require, exports, maishu_chitu_service_1, PageMaster_1, Errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const EmtpyStateData = \"\";\n    const DefaultPageName = \"index\";\n    function parseUrl(url) {\n        if (!url)\n            throw Errors_1.Errors.argumentNull('url');\n        let sharpIndex = url.indexOf('#');\n        let routeString;\n        if (sharpIndex >= 0)\n            routeString = url.substr(sharpIndex + 1);\n        else\n            routeString = url;\n        if (!routeString)\n            throw Errors_1.Errors.canntParseRouteString(url);\n        if (routeString.startsWith('!')) {\n            throw Errors_1.Errors.canntParseRouteString(routeString);\n        }\n        let routePath;\n        let search = null;\n        let param_spliter_index = routeString.indexOf('?');\n        if (param_spliter_index >= 0) {\n            search = routeString.substr(param_spliter_index + 1);\n            routePath = routeString.substring(0, param_spliter_index);\n        }\n        else {\n            routePath = routeString;\n        }\n        if (!routePath)\n            routePath = DefaultPageName;\n        let values = {};\n        if (search) {\n            values = pareeUrlQuery(search);\n        }\n        let pageName = routePath;\n        return { pageName, values };\n    }\n    exports.parseUrl = parseUrl;\n    function pareeUrlQuery(query) {\n        let match, pl = /\\+/g, search = /([^&=]+)=?([^&]*)/g, decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\n        let urlParams = {};\n        while (match = search.exec(query))\n            urlParams[decode(match[1])] = decode(match[2]);\n        return urlParams;\n    }\n    function createUrl(pageName, params) {\n        let path_parts = pageName.split('.');\n        let path = path_parts.join('/');\n        if (!params)\n            return `#${path}`;\n        let paramsText = '';\n        for (let key in params) {\n            let value = params[key];\n            let type = typeof params[key];\n            if (type != 'string' || value == null) {\n                continue;\n            }\n            paramsText = paramsText == '' ? `?${key}=${params[key]}` : paramsText + `&${key}=${params[key]}`;\n        }\n        return `#${path}${paramsText}`;\n    }\n    class Application extends PageMaster_1.PageMaster {\n        constructor(args) {\n            super((args || {}).container || document.body, (args || {}).parser);\n            this._runned = false;\n            this.closeCurrentOnBack = null;\n            this.tempPageData = undefined;\n        }\n        parseUrl(url) {\n            if (!url)\n                throw Errors_1.Errors.argumentNull('url');\n            let routeData = parseUrl(url);\n            return routeData;\n        }\n        createUrl(pageName, values) {\n            return createUrl(pageName, values);\n        }\n        run() {\n            if (this._runned)\n                return;\n            let showPage = () => {\n                let url = location.href;\n                let sharpIndex = url.indexOf('#');\n                let routeString = url.substr(sharpIndex + 1);\n                if (routeString.startsWith('!')) {\n                    return;\n                }\n                if (sharpIndex < 0) {\n                    url = '#' + DefaultPageName;\n                }\n                this.showPageByUrl(url);\n            };\n            showPage();\n            window.addEventListener('hashchange', () => {\n                showPage();\n            });\n            this._runned = true;\n        }\n        showPageByUrl(url) {\n            if (!url)\n                throw Errors_1.Errors.argumentNull('url');\n            let tempPageData = this.fetchTemplatePageData();\n            let result = null;\n            if (this.closeCurrentOnBack == true) {\n                this.closeCurrentOnBack = null;\n                if (tempPageData == null)\n                    this.closeCurrentPage();\n                else\n                    this.closeCurrentPage(tempPageData);\n                result = this.currentPage;\n            }\n            else if (this.closeCurrentOnBack == false) {\n                this.closeCurrentOnBack = null;\n                var page = this.pageStack.pop();\n                if (page == null)\n                    throw new Error('page is null');\n                page.hide(this.currentPage);\n                result = this.currentPage;\n            }\n            if (result == null || result.url != url) {\n                result = this.showPage(url);\n            }\n            return result;\n        }\n        fetchTemplatePageData() {\n            if (this.tempPageData == null) {\n                return null;\n            }\n            let data = this.tempPageData;\n            this.tempPageData = undefined;\n            return data;\n        }\n        setLocationHash(url) {\n            history.pushState(EmtpyStateData, \"\", url);\n        }\n        redirect(pageNameOrUrl, args) {\n            if (!pageNameOrUrl)\n                throw Errors_1.Errors.argumentNull('pageNameOrUrl');\n            let page = this.showPageByNameOrUrl(pageNameOrUrl, args);\n            let url = this.createUrl(page.name, page.data);\n            this.setLocationHash(url);\n            return page;\n        }\n        forward(pageNameOrUrl, args, setUrl) {\n            if (!pageNameOrUrl)\n                throw Errors_1.Errors.argumentNull('pageNameOrUrl');\n            if (setUrl == null)\n                setUrl = true;\n            let page = this.showPageByNameOrUrl(pageNameOrUrl, args, true);\n            if (setUrl) {\n                let url = this.createUrl(page.name, page.data);\n                this.setLocationHash(url);\n            }\n            else {\n                history.pushState(pageNameOrUrl, \"\", \"\");\n            }\n            return page;\n        }\n        showPageByNameOrUrl(pageNameOrUrl, args, rerender) {\n            let pageName;\n            if (pageNameOrUrl.indexOf('?') < 0) {\n                pageName = pageNameOrUrl;\n            }\n            else {\n                let obj = this.parseUrl(pageNameOrUrl);\n                pageName = obj.pageName;\n                args = Object.assign(obj.values, args || {});\n            }\n            return this.showPage(pageName, args, rerender);\n        }\n        reload(pageName, args) {\n            let result = this.showPage(pageName, args, true);\n            return result;\n        }\n        back(closeCurrentPage, data) {\n            const closeCurrentPageDefault = true;\n            if (typeof closeCurrentPage == 'object') {\n                data = closeCurrentPage;\n                closeCurrentPage = null;\n            }\n            this.closeCurrentOnBack = closeCurrentPage == null ? closeCurrentPageDefault : closeCurrentPage;\n            this.tempPageData = data;\n            history.back();\n        }\n        createService(type) {\n            type = type || maishu_chitu_service_1.Service;\n            let service = new type();\n            service.error.add((sender, error) => {\n                this.error.fire(this, error, null);\n            });\n            return service;\n        }\n    }\n    exports.Application = Application;\n});\n","define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Errors {\n        static pageNodeNotExists(pageName) {\n            let msg = `Page node named ${pageName} is not exists.`;\n            return new Error(msg);\n        }\n        static actionCanntNull(pageName) {\n            let msg = `Action of '${pageName}' can not be null.`;\n            return new Error(msg);\n        }\n        static argumentNull(paramName) {\n            var msg = `The argument \"${paramName}\" cannt be null.`;\n            return new Error(msg);\n        }\n        static modelFileExpecteFunction(script) {\n            var msg = `The eval result of script file \"${script}\" is expected a function.`;\n            return new Error(msg);\n        }\n        static paramTypeError(paramName, expectedType) {\n            var msg = `The param \"${paramName}\" is expected \"${expectedType}\" type.`;\n            return new Error(msg);\n        }\n        static paramError(msg) {\n            return new Error(msg);\n        }\n        static pathPairRequireView(index) {\n            var msg = `The view value is required for path pair, but the item with index \"${index}\" is miss it.`;\n            return new Error(msg);\n        }\n        static notImplemented(name) {\n            var msg = `'The method \"${name}\" is not implemented.'`;\n            return new Error(msg);\n        }\n        static routeExists(name) {\n            var msg = `Route named \"${name}\" is exists.`;\n            return new Error(msg);\n        }\n        static noneRouteMatched(url) {\n            var msg = `None route matched with url \"${url}\".`;\n            var error = new Error(msg);\n            return error;\n        }\n        static emptyStack() {\n            return new Error('The stack is empty.');\n        }\n        static canntParseUrl(url) {\n            var msg = `Can not parse the url \"${url}\" to route data.`;\n            return new Error(msg);\n        }\n        static canntParseRouteString(routeString) {\n            var msg = `Can not parse the route string \"${routeString}\" to route data.;`;\n            return new Error(msg);\n        }\n        static routeDataRequireController() {\n            var msg = 'The route data does not contains a \"controller\" file.';\n            return new Error(msg);\n        }\n        static routeDataRequireAction() {\n            var msg = 'The route data does not contains a \"action\" file.';\n            return new Error(msg);\n        }\n        static viewCanntNull() {\n            var msg = 'The view or viewDeferred of the page cannt null.';\n            return new Error(msg);\n        }\n        static createPageFail(pageName) {\n            var msg = `Create page \"${pageName}\" fail.`;\n            return new Error(msg);\n        }\n        static actionTypeError(pageName) {\n            let msg = `The action in page '${pageName}' is expect as function.`;\n            return new Error(msg);\n        }\n        static canntFindAction(pageName) {\n            let msg = `Cannt find action in page '${pageName}', is the exports has default field?`;\n            return new Error(msg);\n        }\n        static exportsCanntNull(pageName) {\n            let msg = `Exports of page '${pageName}' is null.`;\n            return new Error(msg);\n        }\n        static scrollerElementNotExists() {\n            let msg = \"Scroller element is not exists.\";\n            return new Error(msg);\n        }\n        static resourceExists(resourceName, pageName) {\n            let msg = `Rosource '${resourceName}' is exists in the resources of page '${pageName}'.`;\n            return new Error(msg);\n        }\n        static siteMapRootCanntNull() {\n            let msg = `The site map root node can not be null.`;\n            return new Error(msg);\n        }\n        static duplicateSiteMapNode(name) {\n            let msg = `The site map node ${name} is exists.`;\n            return new Error(msg);\n        }\n        static unexpectedNullValue() {\n            let msg = `Unexpected null value.`;\n            return new Error(msg);\n        }\n    }\n    exports.Errors = Errors;\n});\n","define([\"require\", \"exports\", \"maishu-chitu-service\", \"./Errors\", \"./Application\"], function (require, exports, maishu_chitu_service_1, Errors_1, Application_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Page {\n        constructor(params) {\n            this.data = {};\n            this.showing = maishu_chitu_service_1.Callbacks();\n            this.shown = maishu_chitu_service_1.Callbacks();\n            this.hiding = maishu_chitu_service_1.Callbacks();\n            this.hidden = maishu_chitu_service_1.Callbacks();\n            this.closing = maishu_chitu_service_1.Callbacks();\n            this.closed = maishu_chitu_service_1.Callbacks();\n            this._element = params.element;\n            this._app = params.app;\n            this._displayer = params.displayer;\n            let routeData = Application_1.parseUrl(params.url);\n            this.data = Object.assign(routeData.values, params.data || {});\n            this._name = routeData.pageName;\n            this._url = params.url;\n        }\n        on_showing() {\n            return this.showing.fire(this, this.data);\n        }\n        on_shown() {\n            return this.shown.fire(this, this.data);\n        }\n        on_hiding() {\n            return this.hiding.fire(this, this.data);\n        }\n        on_hidden() {\n            return this.hidden.fire(this, this.data);\n        }\n        on_closing() {\n            return this.closing.fire(this, this.data);\n        }\n        on_closed() {\n            return this.closed.fire(this, this.data);\n        }\n        show() {\n            this.on_showing();\n            let currentPage = this._app.currentPage;\n            if (this == currentPage) {\n                currentPage = null;\n            }\n            return this._displayer.show(this, currentPage).then(o => {\n                this.on_shown();\n            });\n        }\n        hide(currentPage) {\n            this.on_hiding();\n            return this._displayer.hide(this, currentPage).then(o => {\n                this.on_hidden();\n            });\n        }\n        close() {\n            this.on_closing();\n            let parentElement = this._element.parentElement;\n            if (parentElement == null)\n                throw Errors_1.Errors.unexpectedNullValue();\n            parentElement.removeChild(this._element);\n            this.on_closed();\n            return Promise.resolve();\n        }\n        createService(type) {\n            type = type || maishu_chitu_service_1.Service;\n            let service = new type();\n            service.error.add((sender, error) => {\n                this._app.error.fire(this._app, error, this);\n            });\n            return service;\n        }\n        get element() {\n            return this._element;\n        }\n        get name() {\n            return this._name;\n        }\n        get url() {\n            return this._url;\n        }\n        get app() {\n            return this._app;\n        }\n    }\n    Page.tagName = 'div';\n    exports.Page = Page;\n    class PageDisplayerImplement {\n        show(page, previous) {\n            page.element.style.display = 'block';\n            if (previous != null) {\n                previous.element.style.display = 'none';\n            }\n            return Promise.resolve();\n        }\n        hide(page, previous) {\n            page.element.style.display = 'none';\n            if (previous != null) {\n                previous.element.style.display = 'block';\n            }\n            return Promise.resolve();\n        }\n    }\n    exports.PageDisplayerImplement = PageDisplayerImplement;\n});\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"maishu-chitu-service\", \"./Page\", \"./Application\", \"./Errors\"], function (require, exports, maishu_chitu_service_1, Page_1, Application_1, Errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class PageMaster {\n        constructor(container, parser) {\n            this.pageCreated = maishu_chitu_service_1.Callbacks();\n            this.pageShowing = maishu_chitu_service_1.Callbacks();\n            this.pageShown = maishu_chitu_service_1.Callbacks();\n            this.pageType = Page_1.Page;\n            this.pageDisplayType = Page_1.PageDisplayerImplement;\n            this.cachePages = {};\n            this.page_stack = new Array();\n            this.nodes = {};\n            this.MAX_PAGE_COUNT = 100;\n            this.error = maishu_chitu_service_1.Callbacks();\n            this.parser = parser || this.defaultPageNodeParser();\n            if (!container)\n                throw Errors_1.Errors.argumentNull(\"container\");\n            this.parser.actions = this.parser.actions || {};\n            this.container = container;\n        }\n        defaultPageNodeParser() {\n            let nodes = {};\n            let p = {\n                actions: {},\n                parse: (pageName) => {\n                    let node = nodes[pageName];\n                    if (node == null) {\n                        let path = `modules_${pageName}`.split('_').join('/');\n                        node = { action: this.createDefaultAction(path, this.loadjs), name: pageName };\n                        nodes[pageName] = node;\n                    }\n                    return node;\n                }\n            };\n            return p;\n        }\n        createDefaultAction(url, loadjs) {\n            return (page) => __awaiter(this, void 0, void 0, function* () {\n                let actionExports = yield loadjs(url);\n                if (!actionExports)\n                    throw Errors_1.Errors.exportsCanntNull(url);\n                let _action = actionExports.default;\n                if (_action == null) {\n                    throw Errors_1.Errors.canntFindAction(page.name);\n                }\n                let result;\n                if (PageMaster.isClass(_action)) {\n                    let action = _action;\n                    result = new action(page, this);\n                }\n                else {\n                    let action = _action;\n                    result = action(page, this);\n                }\n                return result;\n            });\n        }\n        loadjs(path) {\n            return new Promise((reslove, reject) => {\n                requirejs([path], function (result) {\n                    reslove(result);\n                }, function (err) {\n                    reject(err);\n                });\n            });\n        }\n        on_pageCreated(page) {\n            return this.pageCreated.fire(this, page);\n        }\n        get currentPage() {\n            if (this.page_stack.length > 0)\n                return this.page_stack[this.page_stack.length - 1];\n            return null;\n        }\n        getPage(pageUrl, values) {\n            if (!pageUrl)\n                throw Errors_1.Errors.argumentNull('pageUrl');\n            values = values || {};\n            let cachePage = this.cachePages[pageUrl];\n            if (cachePage != null) {\n                cachePage.data = values || {};\n                return { page: cachePage, isNew: false };\n            }\n            let page = this.createPage(pageUrl, values);\n            this.cachePages[pageUrl] = page;\n            this.on_pageCreated(page);\n            return { page, isNew: true };\n        }\n        createPage(pageUrl, values) {\n            if (!pageUrl)\n                throw Errors_1.Errors.argumentNull('pageUrl');\n            values = values || {};\n            let element = this.createPageElement(pageUrl);\n            let displayer = new this.pageDisplayType(this);\n            console.assert(this.pageType != null);\n            let page = new this.pageType({\n                app: this,\n                url: pageUrl,\n                data: values,\n                displayer,\n                element,\n            });\n            let showing = (sender) => {\n                this.pageShowing.fire(this, sender);\n            };\n            let shown = (sender) => {\n                this.pageShown.fire(this, sender);\n            };\n            page.showing.add(showing);\n            page.shown.add(shown);\n            page.closed.add(() => {\n                page.showing.remove(showing);\n                page.shown.remove(shown);\n            });\n            return page;\n        }\n        createPageElement(pageName) {\n            let element = document.createElement(Page_1.Page.tagName);\n            this.container.appendChild(element);\n            return element;\n        }\n        showPage(pageUrl, args, forceRender) {\n            args = args || {};\n            forceRender = forceRender == null ? false : true;\n            if (!pageUrl)\n                throw Errors_1.Errors.argumentNull('pageName');\n            if (this.currentPage != null && this.currentPage.url == pageUrl)\n                return this.currentPage;\n            let { page, isNew } = this.getPage(pageUrl, args);\n            if (isNew || forceRender) {\n                let action = this.findPageAction(pageUrl);\n                if (action == null)\n                    throw Errors_1.Errors.actionCanntNull(pageUrl);\n                action(page, this);\n            }\n            page.show();\n            this.pushPage(page);\n            console.assert(page == this.currentPage, \"page is not current page\");\n            return page;\n        }\n        closePage(page) {\n            if (page == null)\n                throw Errors_1.Errors.argumentNull('page');\n            page.close();\n            delete this.cachePages[page.url];\n            this.page_stack = this.page_stack.filter(o => o != page);\n        }\n        pushPage(page) {\n            this.page_stack.push(page);\n            if (this.page_stack.length > this.MAX_PAGE_COUNT) {\n                let page = this.page_stack.shift();\n                if (page)\n                    this.closePage(page);\n            }\n        }\n        findPageAction(pageUrl) {\n            let routeData = Application_1.parseUrl(pageUrl);\n            let pageName = routeData.pageName;\n            let node = this.findSiteMapNode(pageName);\n            if (node == null)\n                throw Errors_1.Errors.pageNodeNotExists(pageName);\n            let action = node.action;\n            if (action == null)\n                throw Errors_1.Errors.actionCanntNull(pageName);\n            return node.action;\n        }\n        findSiteMapNode(pageName) {\n            if (this.nodes[pageName])\n                return this.nodes[pageName];\n            let node = null;\n            let action = this.parser.actions ? this.parser.actions[pageName] : null;\n            if (action != null) {\n                node = { action, name: pageName };\n            }\n            if (node == null && this.parser.parse != null) {\n                node = this.parser.parse(pageName);\n                console.assert(node.action != null);\n            }\n            if (node != null)\n                this.nodes[pageName] = node;\n            return node;\n        }\n        closeCurrentPage(passData) {\n            var page = this.page_stack.pop();\n            if (page == null)\n                return;\n            this.closePage(page);\n            if (this.currentPage) {\n                if (passData) {\n                    console.assert(this.currentPage.data != null);\n                    this.currentPage.data = Object.assign(this.currentPage.data, passData);\n                }\n                this.currentPage.show();\n            }\n        }\n        get pageStack() {\n            return this.page_stack;\n        }\n    }\n    PageMaster.isClass = (function () {\n        var toString = Function.prototype.toString;\n        function fnBody(fn) {\n            return toString.call(fn).replace(/^[^{]*{\\s*/, '').replace(/\\s*}[^}]*$/, '');\n        }\n        function isClass(fn) {\n            return (typeof fn === 'function' &&\n                (/^class(\\s|\\{\\}$)/.test(toString.call(fn)) ||\n                    (/^.*classCallCheck\\(/.test(fnBody(fn)))));\n        }\n        return isClass;\n    })();\n    exports.PageMaster = PageMaster;\n});\n","define([\"require\", \"exports\", \"./Application\", \"./PageMaster\", \"./Page\", \"maishu-chitu-service\"], function (require, exports, Application_1, PageMaster_1, Page_1, maishu_chitu_service_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Application = Application_1.Application;\n    exports.PageMaster = PageMaster_1.PageMaster;\n    exports.Page = Page_1.Page;\n    exports.Callback = maishu_chitu_service_1.Callback;\n    exports.Callbacks = maishu_chitu_service_1.Callbacks;\n    exports.ValueStore = maishu_chitu_service_1.ValueStore;\n    exports.Service = maishu_chitu_service_1.Service;\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_chitu_service__;"],"sourceRoot":""}